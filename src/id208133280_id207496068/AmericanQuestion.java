package id208133280_id207496068;

import DataBase.DbManager;

import java.io.Serializable;
import java.util.ArrayList;

public class AmericanQuestion extends Question implements Serializable  {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected String rightAnswer;
	protected Set<String> allAnswers;
	protected ArrayList<Integer> answerId;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(String qText) {
		super(qText);
		allAnswers = new Set<>(String.class, 10);
		answerId = new ArrayList<>();
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(String qText,String rightAnswer) {
		super(qText);
		allAnswers = new Set<>(String.class, 10);
		this.rightAnswer=rightAnswer;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean addAnswers(String text) {
		if (allAnswers.size() == 10||allAnswers.contains(text)) {
			return false;
		} else {
			allAnswers.add(text);
			answerId.add(DbManager.Aid);
			DbManager.incrId();
			return true;
		}
	}

	public int getAnswerId(int index)
	{
		return answerId.get(index);
	}

	public void setAnswerID(ArrayList<Integer> AllAnswerID)
	{
		this.answerId = AllAnswerID;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void changeAnswer(String text, int num) {
		allAnswers.set(num, text);
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	public int getArraySize() {
		return allAnswers.size();
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public String getAnswer(int num) {
		return allAnswers.get(num);
	}

	public int getRightAnswerIndex()
	{
		int rightAnswer = 1;
		for (int i = 0; i < allAnswers.size(); i++)
		{
			if(allAnswers.get(i).equals(this.rightAnswer))
			{
				rightAnswer = i;
			}
		}
		return rightAnswer + 1;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean setRightAnswer(int rightAnswer) {
		if (rightAnswer <= allAnswers.size()) {
			this.rightAnswer = allAnswers.get((rightAnswer) - 1);
			return true;
		} else {
			System.out
					.println("The given number doesent correspond to any answer in current question, please try again");
			return false;
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void deleteAnswer(int index) {
		allAnswers.remove(index);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Question text: " + qText + "\n" + "Possible answers:" + "\n");
		for (int i = 0; (i < allAnswers.size()) && (allAnswers.get(i) != null); i++) {
			sb.append((i + 1) + "-" + allAnswers.get(i));
			if (allAnswers.get(i) == rightAnswer) {
				sb.append("-->Correct Answer Aid="+ getAnswerId(i) + "\n");
			} else {
				sb.append("-->Wrong Answer Aid="+getAnswerId(i) + "\n");
			}
		}
		return sb.toString();
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(AmericanQuestion other) {
		this.qText = other.qText;
		this.rightAnswer = other.rightAnswer;
		this.id = other.id;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean checkIfExists(String answer) {
		return allAnswers.contains(answer);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void addNoAnswersAreCorrect() {
		allAnswers.add("No answers are correct");
		if (!(allAnswers.contains(rightAnswer))) {
			rightAnswer = "No answers are correct";
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean equals(AmericanQuestion other) {
		if (this.qText.equals(other.qText) == false) {
			return false;
		} else if (this.rightAnswer.equals(other.rightAnswer) == false) {
			return false;
		} else if (this.allAnswers.size() != other.allAnswers.size()) {
			return false;
		} else {
			boolean check = true;
			for (int i = 0; i < this.allAnswers.size(); i++) {
				if (this.allAnswers.contains(other.allAnswers.get(i))) {
					check &= true;
				} else {
					check &= false;
				}
			}
			return check;
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
